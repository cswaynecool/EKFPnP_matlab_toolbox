function X=triangulate(P, x, F)
%
% INPUTS:
%   P[3,4,m]: m camera projection matrix
%   x[3,n,m]: n correspondance points in m camera
%
% OUTPUTS:
%   X[4,n]: 3D tructure points
%
% REFERENCE
%   - Linear: HZ2, (12.2) Linear triangulation methods, p312
%   - non-Linear: HZ2, (12.5) An optimal solution, p318
%       Algorithm 12.1. The optimal triangulation method.
%
% AUTHOR: ma.mehralian

%X=non_linear_triangulation(P1, P2, x1, x2, F);
X=linear_triangulation(P, x);
end
%%
function X=linear_triangulation(P, x)
% hemogen
x=x./repmat(x(3,:,:), 3, 1, 1);

n = size(x, 2);
m = size(x, 3);
X = zeros(4, n);
%A2=zeros(4,4*n);
for i=1:n
    A=nan(2*m, 4);
    for j=1:m
        A(2*j-1:2*j,:)=[x(1,i,j)* P(3,:,j) - P(1,:,j);
                        x(2,i,j)* P(3,:,j) - P(2,:,j)];
    end   
    [~,~,V] = svd(A);
    X_ = V(:,end);
    X_ = X_ / X_(4);
    X(:,i)=X_;
end
end
%%
function X=non_linear_triangulation(P1, P2, x1, x2, F)
x1=x1./repmat(x1(3,:),3,1);
x2=x2./repmat(x2(3,:),3,1);
n=size(x1,2);
x1_ = zeros(3,n);
x2_ = zeros(3,n);

T1 = eye(3);
T2 = eye(3);
for i=1:n
    % ----------- (i)
    T1(1:2,3) = -x1(1:2,i);
    T2(1:2,3) = -x2(1:2,i);
    
    % ----------- (ii)
    Fnew = inv(T2)'*F*inv(T1);
    
    % ----------- (iii)
    e1 = null(F);
    e2 = null(F');
    e1 = e1 / sqrt(e1(1)^2 + e1(2)^2);
    e2 = e2 / sqrt(e2(1)^2 + e2(2)^2);
    
    % ----------- (iv)
    R1 = [e1(1:2)' 0; -e1(2) e1(1) 0; 0 0 1];
    R2 = [e2(1:2)' 0; -e2(2) e2(1) 0; 0 0 1];
    
    % ----------- (v)
    Fnew = R2*Fnew*R1';
    
    % ----------- (vi)
    f1 = e1(3); f2 = e2(3);
    a = Fnew(2,2); b = Fnew(2,3); c = Fnew(3,2); d = Fnew(3,3);
    
    % ----------- (vii)
    % form the polynomial g(t) as shown in Eq(12.7), page 317
    % of Hartley & Zisserman
    % Below are the coefficients generated by Matlab's symbolic
    % maths toolbox
    coeff0 = b^2*c*d-a*d^2*b;
    coeff1 = -a^2*d^2+b^2*c^2+f2^4*d^4+b^4+2*b^2*f2^2*d^2;
    coeff2 = 4*b^2*f2^2*c*d-2*a*d^2*f1^2*b+2*b^2*c*f1^2*d+...
        4*f2^4*c*d^3+4*a*b^3-a^2*d*c+b*c^2*a+4*a*b*f2^2*d^2;
    coeff3 = 6*a^2*b^2-2*a^2*d^2*f1^2+6*f2^4*c^2*d^2+2*b^2*f2^2*c^2+...
        2*b^2*c^2*f1^2+8*a*b*f2^2*c*d+2*a^2*f2^2*d^2;
    coeff4 = 4*f2^4*c^3*d-a*d^2*f1^4*b+4*a^2*f2^2*c*d+4*a*b*f2^2*c^2+...
        2*b*c^2*f1^2*a+4*a^3*b+b^2*c*f1^4*d-2*a^2*d*f1^2*c;
    coeff5 = (a^2+f2^2*c^2)^2-(a*d-b*c)*f1^4*b*c-(a*d-b*c)*f1^4*a*d;
    coeff6 = (-a*d+b*c)*f1^4*a*c;
    ts = roots([coeff6 coeff5 coeff4 coeff3 coeff2 coeff1 coeff0]);
    ts = real(ts);
    
    % ----------- (viii)
    min_cost = Inf;
    for j = 1:length(ts)
        t = ts(j);
        cost = t^2 / (1+f1^2*t^2) + (c*t+d)^2/( (a*t+b)^2 + f2^2*(c*t+d)^2 );
        if cost < min_cost
            min_cost = cost;
            best_t = t;
        end
    end
    asym_cost = 1 / f1^2 + c^2/(a^2 + f2^2*c^2);
    if (asym_cost < min_cost)
        min_cost = asym_cost;
        best_t = inf;
    end
    
    % ----------- (ix)
    l1 = [best_t*f1; 1; -best_t];
    l2 = [-f2*(c*best_t+d); a*best_t+b; c*best_t+d];
    
    % ----------- (x)
    x1_(:,i) = [-l1(1)*l1(3); -l1(2)*l1(3); l1(1)^2+l1(2)^2];
    x2_(:,i) = [-l2(1)*l2(3); -l2(2)*l2(3); l2(1)^2+l2(2)^2];
    x1_(:,i) = inv(T1)*R1'*x1_(:,i);
    x2_(:,i) = inv(T2)*R2'*x2_(:,i);
end

X=linear_triangulation(P1, P2, x1_, x2_);
end